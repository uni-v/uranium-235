# See LICENSE for license details.

#################################
# ROM Generator.
#################################

import datetime
import sys

def gen_rom_file(bin_file_path):
    rom_file_name = 'uv_rom_logic.v'
    rom_file = open(rom_file_name, 'w')
    bin_file = open(bin_file_path, 'rb')
    bin_data = bin_file.read()
    bin_len  = len(bin_data)
    rom_dp   = bin_len // 4
    if bin_len % 4 != 0:
        rom_dp += 1
    print("bin_len = %0d" % bin_len)

    # Write comment header.
    rom_file.write("//************************************************************\n")
    rom_file.write("// See LICENSE for license details.\n")
    rom_file.write("//\n")
    rom_file.write("// Module: uv_rom_logic\n")
    rom_file.write("//\n")
    rom_file.write("// Designer: Owen\n")
    rom_file.write("//\n")
    rom_file.write("// Description:\n")
    rom_file.write("//      ROM Logic for Boot.\n")
    rom_file.write("//      This file was automatically generated by rom_gen.py\n")
    rom_file.write("//      at %s.\n" % datetime.datetime.now().strftime("%H:%M:%S, %Y/%m/%d"))
    rom_file.write("//************************************************************\n")
    rom_file.write("\n")

    # Write timescale.
    rom_file.write("`timescale 1ns / 1ps\n")
    rom_file.write("\n")

    # Write module ports & parameters.
    rom_file.write("module uv_rom_logic\n")
    rom_file.write("#(\n")
    rom_file.write("    parameter ROM_AW = 10\n")
    rom_file.write(")\n")
    rom_file.write("(\n")
    rom_file.write("    input                           clk,\n")
    rom_file.write("    input                           rst_n,\n")
    rom_file.write("\n")
    rom_file.write("    input  [ROM_AW-1:0]             rom_addr,\n")
    rom_file.write("    output [63:0]                   rom_data\n")
    rom_file.write(");\n")
    rom_file.write("\n")

    rom_file.write("    localparam ROM_DP = %0d;\n" % rom_dp)
    rom_file.write("    wire [31:0] rom_array [0:ROM_DP-1];\n")
    rom_file.write("    wire [31:0] rom_data0;\n")
    rom_file.write("    wire [31:0] rom_data1;\n")
    rom_file.write("    wire [ROM_AW-1:0] rom_addr_add;\n")
    rom_file.write("\n")

    rom_file.write("    assign rom_addr_add = rom_addr + 1'b1;\n")
    rom_file.write("    assign rom_data0    = rom_addr < ROM_DP[ROM_AW-1:0] ? rom_array[rom_addr] : 32'h0;\n")
    rom_file.write("    assign rom_data1    = rom_addr_add < ROM_DP[ROM_AW-1:0] ? rom_array[rom_addr_add] : 32'h0;\n")
    rom_file.write("    assign rom_data     = {rom_data1, rom_data0};\n")
    rom_file.write("\n")

    for i in range(0, bin_len // 4):
        rom_file.write("    assign rom_array[%0d] = 32'h%02x%02x%02x%02x;\n" % (i, bin_data[i*4+3], bin_data[i*4+2], bin_data[i*4+1], bin_data[i*4]))
    if bin_len % 4 != 0:
        rom_file.write("    assign rom_array[%0d] = 32'h" % (bin_len // 4))
        for i in range(bin_len // 4 * 4, bin_len):
            rom_file.write("%02x" % bin_data[i])
        rom_file.write(";\n")

    rom_file.write("\n")
    rom_file.write("endmodule\n")

    # os.c
    rom_file.close()
    bin_file.close()

if __name__ == '__main__':
    bin_file_path = './boot.bin'
    if len(sys.argv) > 1:
        bin_file_path = sys.argv[1]
    gen_rom_file(bin_file_path)
